{"pages":[{},{},{},{}],"posts":[{"title":"codeforces Round#623 Recommendations","date":"2020-03-31T02:49:54.000Z","path":"/posts/undefined/","text":"题目链接 题目大意有n类书，对于第i类，有ai 版书，可花费ti的时间增加一版，求最小花费使得每类书的版数不重复。 O(n^2)解法ai从小到大对n类书排序，对于数目为x的k类书，选取花费最大的一类不变，其他k-1类书数目变为x+1，总花费加上这k-1类花费的和。 本菜鸡绞尽脑汁想了好几种方式，试图摆脱TLE/MLE，一一宣告失败 😩几种不同的实现方式如下： 12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 2e5+5;#define ll long longint a[maxn], n;ll ans;int read(){ int x = 0; char c = getchar(); while(c &lt; '0' || c &gt; '9') c = getchar(); while(c &gt;= '0' &amp;&amp; c &lt;= '9') { x = x * 10 + c-'0'; c = getchar(); } return x;} priority_queue&lt;category&gt; q大法12345678910111213141516171819202122232425262728293031323334struct category{ int num, time; bool operator &lt; (const category &amp; e)const { if(num != e.num) return num &lt; e.num; else return time &gt; e.time; }}cat[maxn];int main(){ n = read(); priority_queue&lt;category&gt; q; for(int i = 0; i &lt; n; i ++) a[i] = read(); for(int i = 0; i &lt; n; i ++) q.push({a[i], read()}); while(q.size()) { int number = q.top().num; q.pop(); int i = 1; while(q.size() &amp;&amp; q.top().num == number) { category temp = q.top(); q.pop(); temp.num += i; ans += (ll)temp.time * i; q.push(temp); i ++; } } cout &lt;&lt; ans &lt;&lt; endl; return 0;} map&lt;int, vector&lt;int&gt;&gt;大法 1234567891011121314151617181920212223242526272829303132333435363738int main(){ n = read(); map&lt;int, vector&lt;int&gt;&gt; mp; for(int i = 0; i &lt; n; i ++) a[i] = read(); for(int i = 0; i &lt; n; i ++) { if(mp.find(a[i]) == mp.end()) mp[num[i]] = {}; mp[num[i]].push_back(read()); } for(auto it = mp.begin(); it != mp.end(); it ++) { vector&lt;int&gt; &amp;temp = it -&gt; second; int number = it -&gt; first + 1; if(temp.size() &gt; 1) { int maxt = temp[0]; int k = 0; ans = ans + temp[0]; for(int i = 1; i &lt; temp.size(); i ++) { ans += temp[i]; if(temp[i] &gt; maxt) { maxt = temp[i]; k = i; } } ans = ans - maxt; temp.erase(temp.begin() + k); if(mp.find(number) == mp.end()) mp[number] = temp; else for(auto x:temp) mp[number].push_back(x); } } cout &lt;&lt; ans &lt;&lt; endl; return 0;} dfs大法 123456789101112131415161718192021222324unordered_map&lt;int, int&gt; mp;void dfs(int x, int t){ if(mp.count(x) == 0) { mp[x] = t; return; } int small = min(t, mp[x]); int large = max(t, mp[x]); mp[x] = large; ans += small; dfs(x + 1, small);}int main(){ n = read(); for(int i = 0; i &lt; n; i ++) a[i] = read(); for(int i = 0; i &lt; n; i ++) dfs(a[i], read()); cout &lt;&lt; ans &lt;&lt; endl; return 0;} O(nlogn)解法用一个集合维护数目为x的所有书类的花费，用一个变量sum记录集合中所有值的和。每次留下一个max，所有书类数目+1，总花费 += sum - max，sum减去max变为数目为x+1的所有书类花费和。具体见代码： 123456789101112131415161718192021222324252627282930313233int main(){ n = read(); for(int i = 0; i &lt; n; i ++) cat[i].num = read(); for(int i = 0; i &lt; n; i ++) cat[i].time = read(); sort(cat, cat + n); int now = -1; long long sum = 0; priority_queue&lt;long long&gt; q; //用于维护数目为now时的花费集合 for(int i = 0; i &lt; n; i ++) { //清算数目cat[i - 1].num至cat[i].num - 1的花费 while(q.size() &amp;&amp; now &lt; cat[i].num) { sum -= q.top(); q.pop(); ans += sum; now ++; } q.push(cat[i].time); sum += cat[i].time; now = cat[i].num; } while(q.size()) //计算数目 &gt;= cat[n - 1].num的所有花费 { sum -= q.top(); q.pop(); ans += sum; } cout &lt;&lt; ans &lt;&lt; endl; return 0;} 不知道怎么给这种优化方法起名，但是我这种菜鸡真的不容易想到！😑 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","comments":true,"permalink":"http://blog.jiangzh.site/blog/posts/undefined/","excerpt":"题目链接 题目大意有n类书，对于第i类，有ai 版书，可花费ti的时间增加一版，求最小花费使得每类书的版数不重复。 O(n^2)解法ai从小到大对n类书排序，对于数目为x的k类书，选取花费最大的一类不变，其他k-1类书数目变为x+1，总花费加上这k-1类花费的和。 本菜鸡绞尽脑汁想了好几种方式，试图摆脱TLE/MLE，一一宣告失败 😩几种不同的实现方式如下：","categories":[{"name":"codeforces","slug":"codeforces","permalink":"http://blog.jiangzh.site/blog/categories/codeforces/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://blog.jiangzh.site/blog/tags/%E9%A2%98%E8%A7%A3/"},{"name":"codeforces","slug":"codeforces","permalink":"http://blog.jiangzh.site/blog/tags/codeforces/"},{"name":"贪心","slug":"贪心","permalink":"http://blog.jiangzh.site/blog/tags/%E8%B4%AA%E5%BF%83/"}]},{"title":"iOS如何安装SSR客户端","date":"2020-03-28T14:50:26.000Z","path":"/posts/c7a8bb16/","text":"iOS 如何安装SSR客户端作者：Wesley King合作：Mr. Simple 前言：iOS 系统若想通过SSR进行科学上网，需要一个 SSR客户端，比如Potatso，Netshuttle，shadowlink。但是大陆地区 Appstore 无靠谱SSR客户端😑，本文将解决此问题😏。 对于搭建SSR不做详细阐述，如需要请查阅其它文章。以下操作需先将设备连上外网，可以下载一些试用VPN 软件，如 雷霆加速器 。连上后再查找IP地址所在区域，可在浏览器直接搜索“IP”，即可查看。 具体操作 进入国外 AppStore ，此操作需要一个非中国大陆的 Apple ID。 注册非国内 Apple ID（具体国家取决于IP所在地区） 登陆 Apple ID 官网注册。 注册地址 注意用邮箱注册 AppleID 时，有些邮箱无法注册，建议多试几种邮箱，如网易邮箱，谷歌邮箱。 退出原先登陆 Apple ID,登新注册的ID。 修改 ipad / iPhone 地区（具体国家那决于IP所在地区） 打开设置点“通用”， 再点“语言和地区”。 进入 AppStore,下载 SSR 客户端 可能一开始不能正常进入 Appstore, 多尝试几次，或重启设备。 接下来就可以开心地玩耍了！ 😆 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","comments":true,"permalink":"http://blog.jiangzh.site/blog/posts/c7a8bb16/","excerpt":"","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"http://blog.jiangzh.site/blog/tags/%E6%95%99%E7%A8%8B/"},{"name":"搬运","slug":"搬运","permalink":"http://blog.jiangzh.site/blog/tags/%E6%90%AC%E8%BF%90/"}]},{"title":"这是一个正式的博客","date":"2020-03-25T15:36:26.000Z","path":"/posts/f9a412f/","text":"这是一个正式的博客 经过了一天半的折腾，博客算是有了雏形吧，还是挺开心的。这么一折腾，原本对前端一无所知的我，算是对git、web又多了那么一点理解。 本来合计总结总结今天的收获，可正因为我懂得太少，许多东西还没有理解，概括起来还真挺麻烦。索性不说了。 （不是我懒不是我懒不是我懒！） 几个问题：1. git clone 速度奇慢（1kB/s - 15kB/s)，如何解？ 2. 下载（包括下载各种包）速度经常*呈现刚开始快，随后慢慢下降，甚至因为慢而下载失败*的现象，是什么原因呢？ 3. 为什么这么多人喜欢吃香菜呢？？？ 附加. 这Markdown语法是怎么回事啊？？？ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","comments":true,"permalink":"http://blog.jiangzh.site/blog/posts/f9a412f/","excerpt":"","categories":[],"tags":[{"name":"随手记录","slug":"随手记录","permalink":"http://blog.jiangzh.site/blog/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0%E5%BD%95/"}]},{"title":"my_first_blog","date":"2020-03-25T13:21:06.000Z","path":"/posts/c063e824/","text":"发一个blog试试水我的地盘我做主！ 地盘我做主！盘我做主！我做主！做主！主！！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","comments":true,"permalink":"http://blog.jiangzh.site/blog/posts/c063e824/","excerpt":"发一个blog试试水我的地盘我做主！","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"http://blog.jiangzh.site/blog/tags/%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"codeforces","slug":"codeforces","permalink":"http://blog.jiangzh.site/blog/categories/codeforces/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://blog.jiangzh.site/blog/tags/%E9%A2%98%E8%A7%A3/"},{"name":"codeforces","slug":"codeforces","permalink":"http://blog.jiangzh.site/blog/tags/codeforces/"},{"name":"贪心","slug":"贪心","permalink":"http://blog.jiangzh.site/blog/tags/%E8%B4%AA%E5%BF%83/"},{"name":"教程","slug":"教程","permalink":"http://blog.jiangzh.site/blog/tags/%E6%95%99%E7%A8%8B/"},{"name":"搬运","slug":"搬运","permalink":"http://blog.jiangzh.site/blog/tags/%E6%90%AC%E8%BF%90/"},{"name":"随手记录","slug":"随手记录","permalink":"http://blog.jiangzh.site/blog/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0%E5%BD%95/"},{"name":"测试","slug":"测试","permalink":"http://blog.jiangzh.site/blog/tags/%E6%B5%8B%E8%AF%95/"}]}